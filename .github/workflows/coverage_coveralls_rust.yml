name: Coverage Report for rust on Coveralls
on:
  release:
    types: [created]
  pull_request:
    types: [opened, synchronize, reopened]
    paths-ignore:
      - "tools/**"
      - ".vscode/**"
      - ".devcontainer/**"
      - ".github/**"
      - "!.github/workflows/linux_ubuntu2204.yml"
      - "core/src/ten_manager/designer_frontend/**"
      - "**.md"
      - "ai_agents/**"

permissions:
  contents: write

concurrency:
  group: coverage-${{ github.head_ref || github.ref }}-${{ github.sha }}
  cancel-in-progress: false

jobs:
  call-check-pr-status:
    uses: ./.github/workflows/_check_pr_status.yml
  coverage:
    needs: call-check-pr-status
    if: ${{ needs.call-check-pr-status.outputs.should_continue == 'true' }}
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/ten-framework/ten_building_ubuntu2204
    defaults:
      run:
        shell: bash
    steps:
      - name: Debug context
        run: |
          echo "event_name=${{ github.event_name }}"
          echo "event_action=${{ github.event.action }}"
          echo "ref=${{ github.ref }}"
          echo "ref_name=${{ github.ref_name }}"
          echo "ref_type=${{ github.ref_type }}"

      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: false

      - name: Trust working directory
        run: git config --global --add safe.directory "${GITHUB_WORKSPACE}"

      - name: Initialize and update submodules except portal/
        run: |
          submodules=$(git config --file .gitmodules --get-regexp path | awk '$2 != "portal" { print $2 }')
          git submodule init
          for s in $submodules; do
            git submodule update --init --recursive --depth 1 "$s"
          done

      - name: Setup (nightly for coverage)
        run: rustup default nightly-2025-09-18

      - name: Install cargo-llvm-cov
        run: |
          cargo install cargo-llvm-cov
          cargo llvm-cov --version


      - name: Build ten_utils (required by ten_rust)
        run: |
          export PATH=$(pwd)/core/ten_gn:/root/.cargo/bin:$PATH
          echo $PATH

          # Generate build configuration
          # disable_asan=true - disable ASAN because it conflicts with coverage instrumentation
          # ten_enable_go_lint=false - disable Go lint to avoid installing Go toolchain (coverage test doesn't need it)
          EXTRA_ARGS="is_clang=true log_level=1 enable_sanitizer=false enable_serialized_actions=true ten_rust_enable_gen_cargo_config=false ten_enable_cargo_clean=true ten_enable_go_lint=false ten_enable_rust_incremental_build=false ten_manager_enable_frontend=false ten_enable_integration_tests_prebuilt=false"

          echo "Generating build configuration: $EXTRA_ARGS"
          tgn gen linux x64 debug -- $EXTRA_ARGS

          echo "Building ten_utils..."
          tgn build:core/src/ten_utils linux x64 debug

      - name: Generate Rust coverage
        run: |
          rustup component add llvm-tools-preview

          export RUSTFLAGS="-C instrument-coverage"

          # Ensure ten_rust links against the non-ASAN ten_utils built above
          export TEN_UTILS_LIBRARY_PATH="$(pwd)/out/linux/x64/gen/core/src/ten_utils"

          export PROFRAW_DIR="$(pwd)/out/linux/x64/tests/standalone/ten_rust"
          export LLVM_PROFILE_FILE="$PROFRAW_DIR/rust-%p-%m.profraw"
          if [ ! -d "$PROFRAW_DIR" ]; then
              echo "Creating directory: $PROFRAW_DIR"
              mkdir -p "$PROFRAW_DIR"
          fi

          cd core/src/ten_rust

          cargo llvm-cov \
          --package ten_rust \
          --lcov \
          --output-path "../../../out/linux/x64/tests/standalone/ten_rust/rust-coverage-llvmcov.lcov" \
          --ignore-filename-regex="/.cargo/|/target/"

          cd ../../../

          # Verify coverage file was generated
          if [ -f "out/linux/x64/tests/standalone/ten_rust/rust-coverage-llvmcov.lcov" ]; then
            echo "Coverage file generated successfully"
            ls -lh out/linux/x64/tests/standalone/ten_rust/rust-coverage-llvmcov.lcov
          else
            echo "ERROR: Coverage file not generated!"
            exit 1
          fi

      - name: Debug coverage file content
        run: |
          COV_FILE="out/linux/x64/tests/standalone/ten_rust/rust-coverage-llvmcov.lcov"
          echo "=== Detailed coverage file analysis ==="

          if [ -f "$COV_FILE" ]; then
            echo "=== 最终统计 ==="

            # 使用 tr 处理可能的空白字符
            TOTAL_LF=$(grep "^LF:" "$COV_FILE" | tr -d ' ' | awk -F: '{sum += $2} END {print sum}')
            TOTAL_LH=$(grep "^LH:" "$COV_FILE" | tr -d ' ' | awk -F: '{sum += $2} END {print sum}')

            echo "总代码行数: $TOTAL_LF"
            echo "已覆盖行数: $TOTAL_LH"

            if [ "$TOTAL_LF" -gt 0 ]; then
                COVERAGE=$(echo "scale=2; $TOTAL_LH * 100 / $TOTAL_LF" | bc)
                echo "行覆盖率: $COVERAGE%"
            fi
          else
              echo "❌ Coverage file not found"
          fi

      - name: Upload coverage and artifact
        env:
          COVERALLS_REPO_TOKEN: ${{ secrets.TEN_COVERALLS_REPO_TOKEN }}
        run: |
          pip install --user cpp-coveralls
          echo "cpp-coveralls installed successfully"

          # Add user bin directory to PATH
          export PATH="$HOME/.local/bin:$PATH"
          echo "Updated PATH: $PATH"

          # Verify coveralls command is available
          which coveralls || echo "coveralls command not found in PATH"
          coveralls --version || echo "coveralls version check failed"

          if [ -f "out/linux/x64/tests/standalone/ten_rust/rust-coverage-llvmcov.lcov" ]; then
            echo "Uploading coverage to Coveralls..."
            coveralls --lcov-file out/linux/x64/tests/standalone/ten_rust/rust-coverage-llvmcov.lcov --verbose
            echo "Coverage uploaded to Coveralls successfully"
          else
            echo "Warning: coverage.lcov file not found, skipping Coveralls upload"
            ls -la out/linux/x64/tests/standalone/ten_rust/ || true
          fi

      - name: Upload coverage artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: |
            out/linux/x64/tests/standalone/ten_rust/rust-coverage-llvmcov.lcov
          if-no-files-found: error

      - name: Upload coverage to Coveralls
        uses: coverallsapp/github-action@v2
        env:
          COVERALLS_REPO_TOKEN: ${{ secrets.TEN_COVERALLS_REPO_TOKEN }}
        with:
          file: out/linux/x64/tests/standalone/ten_rust/rust-coverage-llvmcov.lcov
          base-path: .
          format: lcov
          coveralls-endpoint: https://coveralls.io
          fail-on-error: true
          debug: true