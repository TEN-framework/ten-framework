name: üîß Manual - ASR Guarder Test

on:
  workflow_dispatch:
    inputs:
      extension:
        description: 'Extension name (required)'
        required: true
        type: string
        default: 'azure_asr_python'
      config_dir:
        description: 'Config directory (optional)'
        required: false
        type: string
        default: 'tests/configs'
      branch:
        description: 'Branch to test (optional, defaults to current branch)'
        required: false
        type: string
        default: ''
      env_vars:
        description: 'Environment variables (use semicolon to separate multiple vars, format: KEY1=VALUE1;KEY2=VALUE2)'
        required: false
        type: string
        default: 'AZURE_ASR_API_KEY=your_key_here;AZURE_ASR_REGION=your_region_here'
      secret_values:
        description: 'Sensitive environment variables (use semicolon to separate multiple vars, format: KEY1=VALUE1;KEY2=VALUE2) - values from GitHub Secrets or other secure sources'
        required: false
        type: string
        default: ''

permissions:
  contents: read

jobs:
  asr-guarder-test:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/ten-framework/ten_agent_build:0.6.11

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: "0"
          submodules: "true"
          ref: ${{ github.event.inputs.branch || github.ref }}

      - name: Configure git
        run: |
          git config --global --add safe.directory $(pwd)

      - name: Setup environment
        run: |
          echo "EXTENSION=${{ github.event.inputs.extension }}" >> $GITHUB_ENV
          echo "CONFIG_DIR=${{ github.event.inputs.config_dir }}" >> $GITHUB_ENV
          echo "BRANCH=${{ github.event.inputs.branch || github.ref_name }}" >> $GITHUB_ENV

      - name: Parse and set sensitive environment variables
        shell: bash
        run: |
          echo "Setting up sensitive environment variables..."

          # Get the sensitive environment variables input
          SECRET_INPUT="${{ github.event.inputs.secret_values }}"

          echo "Processing sensitive environment variables:"
          if [ -n "$SECRET_INPUT" ]; then
            # Count environment variables but don't display actual content
            secret_count=0

            # Split by semicolon and process each variable
            IFS=';' read -ra SECRET_ARRAY <<< "$SECRET_INPUT"
            for env_pair in "${SECRET_ARRAY[@]}"; do
              # Remove leading/trailing whitespace
              env_pair=$(echo "$env_pair" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')

              # Skip empty entries
              if [ -z "$env_pair" ]; then
                continue
              fi

              # Check if it is in KEY=VALUE format
              if echo "$env_pair" | grep -q '^[A-Za-z_][A-Za-z0-9_]*='; then
                key=$(echo "$env_pair" | cut -d'=' -f1)
                value=$(echo "$env_pair" | cut -d'=' -f2-)

                # Set environment variable
                echo "${key}=${value}" >> $GITHUB_ENV

                # Display in log (only show key for security)
                echo "  üîê ${key}=*** (sensitive value hidden)"
                ((secret_count++))
              else
                echo "  ‚ö†Ô∏è  Skipping invalid sensitive environment variable format"
              fi
            done

            if [ $secret_count -gt 0 ]; then
              echo "  üìä Successfully set $secret_count sensitive environment variables"
            fi
          else
            echo "  ‚ÑπÔ∏è  No sensitive environment variables provided"
          fi

      - name: Parse and set custom environment variables
        shell: bash
        run: |
          echo "Setting up custom environment variables..."

          # Get the input and process semicolon-separated variables
          ENV_INPUT="${{ github.event.inputs.env_vars }}"

          echo "Processing custom environment variables:"
          if [ -n "$ENV_INPUT" ]; then
            # Count environment variables but don't display actual content
            env_count=0

            # Split by semicolon and process each variable
            IFS=';' read -ra ENV_ARRAY <<< "$ENV_INPUT"
            for env_pair in "${ENV_ARRAY[@]}"; do
              # Remove leading/trailing whitespace
              env_pair=$(echo "$env_pair" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')

              # Skip empty entries
              if [ -z "$env_pair" ]; then
                continue
              fi

              # Check if it is in KEY=VALUE format
              if echo "$env_pair" | grep -q '^[A-Za-z_][A-Za-z0-9_]*='; then
                key=$(echo "$env_pair" | cut -d'=' -f1)
                value=$(echo "$env_pair" | cut -d'=' -f2-)

                # Set environment variable
                echo "${key}=${value}" >> $GITHUB_ENV

                # Display in log (only show key for security)
                echo "  ‚úÖ ${key}=*** (value hidden for security)"
                ((env_count++))
              else
                echo "  ‚ö†Ô∏è  Skipping invalid environment variable format"
              fi
            done

            if [ $env_count -gt 0 ]; then
              echo "  üìä Successfully set $env_count custom environment variables"
            fi
          else
            echo "  ‚ÑπÔ∏è  No custom environment variables provided"
          fi

      - name: Display test parameters
        run: |
          echo "==================== Test Parameters ===================="
          echo "Branch: ${{ github.event.inputs.branch || github.ref_name }}"
          echo "Extension: ${{ github.event.inputs.extension }}"
          echo "Config Directory: ${{ github.event.inputs.config_dir }}"
          echo ""
          echo "Environment Variables Configuration:"
          if [ -n "${{ github.event.inputs.secret_values }}" ]; then
            echo "üîê Sensitive environment variables provided (values hidden for security)"
          fi
          if [ -n "${{ github.event.inputs.env_vars }}" ]; then
            echo "‚úÖ Custom environment variables provided (semicolon-separated)"
            echo "üìù See environment variable parsing steps above for details (values hidden for security)"
          else
            echo "‚ÑπÔ∏è  No custom environment variables provided"
          fi
          if [ -z "${{ github.event.inputs.env_vars }}" ] && [ -z "${{ github.event.inputs.secret_values }}" ]; then
            echo "‚ÑπÔ∏è  No environment variables provided"
          fi
          echo "========================================================"

      - name: Run ASR Guarder Test
        run: |
          cd ai_agents
          echo "Starting ASR Guarder Test..."
          echo "Branch: ${{ github.event.inputs.branch || github.ref_name }}"
          echo "Extension: ${{ github.event.inputs.extension }}"
          echo "Config Directory: ${{ github.event.inputs.config_dir }}"
          echo ""

          # Display current environment variables (only non-sensitive or for debugging)
          echo "Environment check:"
          env | grep -E "^(EXTENSION|CONFIG_DIR|BRANCH)=" | sort || echo "  Basic variables set"
          echo ""

          # Run the test with specified parameters
          echo "Executing test command..."
          task asr-guarder-test EXTENSION="${{ github.event.inputs.extension }}" CONFIG_DIR="${{ github.event.inputs.config_dir }}" -- -v

      - name: Show test completion
        if: always()
        run: |
          echo "==================== Test Completed ===================="
          echo "Tested Branch: ${{ github.event.inputs.branch || github.ref_name }}"
          echo "Tested Extension: ${{ github.event.inputs.extension }}"
          echo "Config Directory Used: ${{ github.event.inputs.config_dir }}"
          echo "Please check the logs above for detailed test results."
          echo "========================================================"