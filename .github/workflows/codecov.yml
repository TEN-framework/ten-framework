name: Rust Code Coverage
on:
  release:
    types: [created]
  pull_request:
    types: [opened, synchronize, reopened]
    paths-ignore:
      - "tools/**"
      - ".vscode/**"
      - ".devcontainer/**"
      - ".github/**"
      - "!.github/workflows/linux_ubuntu2204.yml"
      - "core/src/ten_manager/designer_frontend/**"
      - "**.md"
      - "ai_agents/**"

permissions:
  contents: write

jobs:
  coverage:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup (nightly for coverage)
        run: rustup default nightly-2025-09-18

      - name: Install grcov
        run: cargo install grcov

      - name: Build ten_utils (required by ten_rust) and ten_rust
        run: |
          export PATH=$(pwd)/core/ten_gn:/root/.cargo/bin:$PATH

          # Generate build configuration
          # disable_asan=true - disable ASAN because it conflicts with coverage instrumentation
          # ten_enable_go_lint=false - disable Go lint to avoid installing Go toolchain (coverage test doesn't need it)
          EXTRA_ARGS="is_clang=true log_level=1 disable_asan=true enable_serialized_actions=true ten_rust_enable_gen_cargo_config=false ten_enable_cargo_clean=true ten_enable_go_lint=false ten_enable_rust_incremental_build=false ten_manager_enable_frontend=false ten_enable_integration_tests_prebuilt=false"

          echo "Generating build configuration: $EXTRA_ARGS"
          tgn gen linux x64 debug -- $EXTRA_ARGS

          echo "Building ten_utils..."
          tgn build:core/src/ten_utils linux x64 debug

          export CARGO_INCREMENTAL=0
          export RUSTFLAGS="-C instrument-coverage -Ccodegen-units=1 -Cinline-threshold=0 -Clink-dead-code -Coverflow-checks=off"

          echo "Building ten_rust_test..."
          tgn build:core/src/ten_rust linux x64 debug

      - name: Run Rust tests
        run: |
          cd out/linux/x64/tests/standalone/ten_rust
          ./unit_test
          ./integration_test

      - name: Generate Rust coverage
        run: |
          rustup component add llvm-tools-preview

          # Use absolute path for source to avoid path mismatches
          grcov out/linux/x64/tests/standalone/ten_rust \
          --binary-path out/linux/x64/tests/standalone/ten_rust/ \
          -s $(pwd)/core/src/ten_rust \
          -t lcov \
          --branch \
          --ignore-not-existing \
          -o out/linux/x64/tests/standalone/ten_rust/rust-coverage.lcov

      - name: Upload to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: out/linux/x64/tests/standalone/ten_rust/rust-coverage.lcov

      - name: Upload coverage to Coveralls
        env:
          COVERALLS_REPO_TOKEN: ${{ secrets.TEN_COVERALLS_REPO_TOKEN }}
        run: |
          pip install --user cpp-coveralls
          echo "cpp-coveralls installed successfully"

          # Add user bin directory to PATH
          export PATH="$HOME/.local/bin:$PATH"
          echo "Updated PATH: $PATH"

          # Verify coveralls command is available
          which coveralls || echo "coveralls command not found in PATH"
          coveralls --version || echo "coveralls version check failed"

          if [ -f "out/linux/x64/tests/standalone/ten_rust/rust-coverage.lcov" ]; then
            echo "Uploading coverage to Coveralls..."
            coveralls --lcov-file out/linux/x64/tests/standalone/ten_rust/rust-coverage.lcov --verbose
            echo "Coverage uploaded to Coveralls successfully"
          else
            echo "Warning: rust-coverage.lcov file not found, skipping Coveralls upload"
            ls -la out/linux/x64/tests/standalone/ten_rust/ || true
          fi

      - name: Add coverage link to job summary
        shell: bash
        run: |
          REPO_NAME=$(echo "$GITHUB_REPOSITORY" | awk -F/ '{print $2}')
          echo "Repository: $GITHUB_REPOSITORY (branch/tag: $GITHUB_REF_NAME)" >> "$GITHUB_STEP_SUMMARY"

          # Coveralls link (assuming standard Coveralls URL format)
          COVERALLS_URL="https://coveralls.io/github/${{ github.repository }}?branch=${GITHUB_REF_NAME}"
          echo "ðŸ“Š **Coverage Reports:** ${COVERALLS_URL}" >> "$GITHUB_STEP_SUMMARY"